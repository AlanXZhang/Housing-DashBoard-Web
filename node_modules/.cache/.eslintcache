[{"/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/index.js":"1","/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/App.js":"2","/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/AreaStat.js":"3","/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/Map.js":"4","/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/Listings.js":"5","/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/SwapButton.js":"6","/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/ListingCard.js":"7"},{"size":202,"mtime":1657760089695,"results":"8","hashOfConfig":"9"},{"size":2781,"mtime":1660513534904,"results":"10","hashOfConfig":"9"},{"size":5939,"mtime":1660510548274,"results":"11","hashOfConfig":"9"},{"size":2142,"mtime":1660511007790,"results":"12","hashOfConfig":"9"},{"size":574,"mtime":1660513588592,"results":"13","hashOfConfig":"9"},{"size":314,"mtime":1659991551762,"results":"14","hashOfConfig":"9"},{"size":1215,"mtime":1660513522253,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"cgl5b7",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/index.js",[],[],[],"/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/App.js",["43"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport \"./App.css\";\nimport AreaStat from \"./components/AreaStat\";\nimport listingData from './assets/data/final_df.csv'; // This needs to be replaced by a HTTP request\n// import listingData from './assets/data/proc_zillow.csv'; // This needs to be replaced by a HTTP request\nimport Map from \"./components/Map\";\nimport Listings from \"./components/Listings\"\nimport SwapButton from \"./components/SwapButton\"\nimport * as d3 from \"d3\";\n\nexport default function App() {\n\n    // Parser function for the csv file\n    function rowConverter(d) {\n        return {\n            sqft: +d.sqft,\n            num_baths: +d.num_baths,\n            num_beds: +d.num_beds,\n            lat: +d.lat,\n            lng: +d.lon,\n            price: +d.price,\n            address: d.address,\n            full_address: d.full_address,\n            zAddress: d.Address,\n            house_type: d.houseType,\n            image: d.Images,\n            description: d.Description,\n            floorplan: d.floorplan,\n            from: d.from\n        };\n    };\n\n    const areaStatRef = useRef(null);\n    const listingsRef = useRef(null);\n\n    const switchTab = () => {\n        if (currTab === \"stats\") {\n\n            // setCurrTab(\"listings\");\n\n            areaStatRef.current.style.animation = \"slideout .1s normal forwards ease\";\n            setTimeout(() => {\n                setCurrTab(\"listings\");\n            }, 250);\n        } else {\n\n            // setCurrTab(\"stats\");\n\n            listingsRef.current.style.animation = \"slideout .1s normal forwards ease\";\n            setTimeout(() => {\n                setCurrTab(\"stats\");\n            }, 250);\n        }\n    }\n\n    // Stores the raw data from the csv file obtained through an API/Fetch call\n    const [mapData, setMapData] = useState(null);\n    const [currTab, setCurrTab] = useState(\"stats\");\n\n    // Loading data from the csv file\n    useEffect(() => {\n        d3.csv(listingData, rowConverter)\n            .then((listingData) => {\n                setMapData(listingData);\n            })\n    }, []);\n\n    if (mapData) {\n        {/* Only Render in the Area Stat once the data has been loaded NOTE: data only evaluates to true if it is not null*/ }\n        return (\n            <div className=\"App\">\n                <Map data={mapData} />\n                {currTab === \"stats\" ?\n                    <AreaStat data={mapData} innerRef={areaStatRef} /> :\n                    <Listings data={mapData} innerRef={listingsRef} />\n                }\n                <SwapButton handleClick={switchTab} state={currTab} />\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"failed\">\n                Please wait while the data is loaded...\n            </div>\n        )\n    }\n}","/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/AreaStat.js",["44","45","46"],[],"import React, { useState, useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport \"./AreaStat.css\";\n// May want to port each component of the Area stat into its own cards for scalability\nexport default function AreaStat(props) {\n\n    // Create an event listener that will update the state when the zooms in or out of the map or drag the map.\n    // Maybe create a removeEventListener function that will remove the event listener when the component is unmounted.\n\n    // Renders 3 times, first time before any data is loaded, second time when data is loaded, third time when the map is zoomed in or out.\n    function updateStats() {\n        // Using IQR to measure the spread by removing outliers\n        let areaMin = d3.quantile(props.data, 0.10, d => d.price);\n        let areaMax = d3.quantile(props.data, 0.90, d => d.price);\n        let areaMedian = d3.median(props.data, d => d.price);\n        let carMinCommuteTime = 8 // d3.quantile(props.data, 0.25, d => d.carCommuteTime);\n        let carMaxCommuteTime = 16 // d3.quantile(props.data, 0.75, d => d.carCommuteTime);\n        let transitMinCommuteTime = 24 // d3.quantile(props.data, 0.25, d => d.transitCommuteTime);\n        let transitMaxCommuteTime = 48 // d3.quantile(props.data, 0.75, d => d.transitCommuteTime);\n        let walkingMinCommuteTime = 62 // d3.quantile(props.data, 0.25, d => d.walkingCommuteTime);\n        let walkingMaxCommuteTime = 168 // d3.quantile(props.data, 0.75, d => d.walkingCommuteTime);\n        let bikingMinCommuteTime = 22 // d3.quantile(props.data, 0.25, d => d.bikingCommuteTime);\n        let bikingMaxCommuteTime = 56 // d3.quantile(props.data, 0.75, d => d.bikingCommuteTime);\n        setStats({\n            areaMin: parseInt(areaMin),\n            areaMax: parseInt(areaMax),\n            areaAverage: parseInt(areaMedian),\n            carMinCommuteTime: parseInt(carMinCommuteTime),\n            carMaxCommuteTime: parseInt(carMaxCommuteTime),\n            transitMinCommuteTime: parseInt(transitMinCommuteTime),\n            transitMaxCommuteTime: parseInt(transitMaxCommuteTime),\n            walkingMinCommuteTime: parseInt(walkingMinCommuteTime),\n            walkingMaxCommuteTime: parseInt(walkingMaxCommuteTime),\n            bikingMinCommuteTime: parseInt(bikingMinCommuteTime),\n            bikingMaxCommuteTime: parseInt(bikingMaxCommuteTime),\n        });\n    }\n\n    const [subsetData, setSubsetData] = useState(null)\n    \n    // Update the subset data when the map is zoomed in or out\n    useEffect(() => {\n\n    }, []);\n\n    function convertMinToTime(min) {\n        let hour = Math.floor(min / 60);\n        let minute = min % 60;\n        let res = hour ? `${hour} hr ${minute} min` : `${minute} min`;\n        return res;\n    }\n\n    // Filters the data based on the viewable area of the map and updates the stats in the area\n    const [stats, setStats] = useState(null);\n\n    // Update stats on launch and whenever the subsetData is updated\n    useEffect(() => {\n        updateStats();\n    }, [props.data]);\n\n    // Need an event listener that changes the subset data and stat when the user moves the map or zooms in or out\n\n    if (stats) { //Only render the Area Overview if the stats have been loaded to prevent unncessary renders\n        return (\n            <div className=\"area-stats\" ref={props.innerRef}>\n                <h2 className='area--overview'>Area Overview</h2>\n                <h3 className=\"area--overview-desc\">The overview will be updated when map moves</h3>\n                <h3 className='area--title'>Price</h3>\n                <div className='area--price'>\n                    <h4 className='area--price-summary'> <span className=\"area--low bold\">${stats.areaMin}</span>/month - <span className=\"area--high bold\">${stats.areaMax}</span>/month</h4>\n                    <h4 className='area--price-summary-text'> Median rent price in map area: <span className=\"bold\">${stats.areaAverage}</span></h4>\n                </div>\n\n                <h3 className='area--title'>Commute Time</h3>\n                <div className='area--commute'>\n                    <div className='car-commmute-time flex'>\n                        <span className=\"iconify\" data-icon=\"bx:car\"></span>\n                        <p>{convertMinToTime(stats.carMinCommuteTime)} to {convertMinToTime(stats.carMaxCommuteTime)}</p>\n                    </div>\n                    <div className='transit-commmute-time flex'>\n                        <span className=\"iconify\" data-icon=\"bx:train\"></span>\n                        <p>{convertMinToTime(stats.transitMinCommuteTime)} to {convertMinToTime(stats.transitMaxCommuteTime)}</p>\n                    </div>\n                    <div className='walking-commmute-time flex'>\n                        <span className=\"iconify\" data-icon=\"bx:walk\"></span>\n                        <p>{convertMinToTime(stats.walkingMinCommuteTime)} to {convertMinToTime(stats.walkingMaxCommuteTime)}</p>\n                    </div>\n                    <div className='biking-commmute-time flex'>\n                        <span className=\"iconify\" data-icon=\"ic:baseline-directions-bike\"></span>\n                        <p>{convertMinToTime(stats.bikingMinCommuteTime)} to {convertMinToTime(stats.bikingMaxCommuteTime)}</p>\n                    </div>\n                </div>\n                <h3 className='area--title'>Crime rate</h3>\n                <div className='area--crime flex'>\n                    <p className=\"area--rating\">A</p>\n                    <p className=\"area--rating-description\">(Safer than <span className=\"bold\">70%</span> of US cities)</p>\n                    {/* Placeholder Rating Icon e.g. A, B, C */}\n                </div>\n                <h3 className=\"area--title\">Future rent estimate</h3>\n                <p>Work in Progress</p>\n                {/* May not implement rent estimate on MVP */}\n                {/* <div className='area--rent-estimate'></div>  */}\n            </div>\n        )\n    }\n}","/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/Map.js",["47","48","49","50","51"],[],"import React, { useState, useEffect } from 'react';\nimport \"./Map.css\";\nimport GoogleMapReact from 'google-map-react';\nimport * as d3 from 'd3';\n\nexport default function Map(props) {\n    const [mapCenter, setMapCenter] = useState({ lat: 32.86867512568862, lng: -117.21368983643102 });\n    const [mapZoom, setMapZoom] = useState(14);\n    const [heatmapData, setHeatmapData] = React.useState({});\n    const [heatmap, toggleHeatmap] = useState(false);\n\n    // Use square root transformation of the price variable to deal with right skewed data \n    useEffect(() => {\n        const median_price = d3.median(props.data, d => d.price);\n        let logScale = d3.scaleLog()\n            .domain([1e-6, d3.max(props.data, d=>d.price)])\n            .range([1, 100]);\n\n        const positionArr = props.data\n            .filter(d => d.lat && d.lng) // Filter out listings that do not have lat and lng values\n            .map(d => ({\n            lat: d.lat,\n            lng: d.lng,\n            weight: d.price <= 0 ? Math.sqrt(median_price) : Math.sqrt(d.price),\n            // weight: logScale(d.price+1),\n            price: d.price,\n            })\n        );\n        const tempHeatmapData = {\n            positions: positionArr,\n            options: {\n                radius: 35,\n                opacity: 0.75,\n                dissipating: true,\n                // gradient: ,\n                // maxIntensity: , \n            }\n        };\n        setHeatmapData(tempHeatmapData);\n    }, [props.data]);\n\n    // console.log(heatmapData)\n\n    // Change the input data when we toggle the heatmap\n\n    return (\n        <div className=\"Map\">\n            {/* <button onClick={() => toggleHeatmap(!heatmap)}>Toggle Heatmap</button> */}\n            <GoogleMapReact\n                bootstrapURLKeys={{\n                    key: \"AIzaSyCnasDuC3M7MHKCLlxqXU3vyJnzKAnwBTw\",\n                    libraries:[\"visualization\"]\n                }}\n                defaultCenter={mapCenter}\n                defaultZoom={mapZoom}\n                heatmap={heatmapData}\n                fullscreenControl={false}\n            >\n            </GoogleMapReact>\n        </div>\n    )\n}","/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/Listings.js",[],[],"/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/SwapButton.js",["52","53"],[],"import React, {useState, useEffect} from 'react';\nimport \"./SwapButton.css\"\n\nexport default function SwapButton(props) {\n\n    return (\n        <button className='swapButton' onClick={props.handleClick}>\n            {props.state === \"stats\" ? \"Search Housing in this Area\" : \"Show Stats\"}\n        </button>\n    )\n}\n","/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/ListingCard.js",["54"],[],"import React from 'react';\nimport './ListingCard.css';\nimport coverPhoto from \"../assets/coverPhoto.png\";\n\nexport default function LisitngCard(props) {\n    const httpRegex = /(https?:\\/\\/[^\\s]+)/g;\n    let images = props.data.image.match(httpRegex);\n    let cover_photo = images[0];\n\n    return (\n        <div className='listing--card'>\n            {/* {console.log(props.data)} */}\n            <div className='listing--card--image'>\n                <img src={coverPhoto} alt={props.data.address} width={250} />\n            </div>\n            <div className='listing--card--line1'>\n                <h2 className=\"listing--card--price\">\n                    ${props.data.price}\n                    <div className=\"subscript\">\n                        /month\n                    </div>\n                </h2>\n                <p>\n                    {props.data.num_beds} \n                    {props.data.num_beds <= 1 ? \"bd\" : \"bds\"}, \n                    {` ${props.data.num_baths}`} \n                    {props.data.num_baths <= 1 ? \"bath\" : \"baths\"}\n                </p>\n            </div>\n            <p>{props.data.full_address.length > 0 ? props.data.full_address : props.data.zAddress }</p>\n        </div>\n    )\n}",{"ruleId":"55","severity":1,"message":"56","line":69,"column":9,"nodeType":"57","messageId":"58","endLine":69,"endColumn":127},{"ruleId":"59","severity":1,"message":"60","line":39,"column":12,"nodeType":"61","messageId":"62","endLine":39,"endColumn":22},{"ruleId":"59","severity":1,"message":"63","line":39,"column":24,"nodeType":"61","messageId":"62","endLine":39,"endColumn":37},{"ruleId":"64","severity":1,"message":"65","line":59,"column":8,"nodeType":"66","endLine":59,"endColumn":20,"suggestions":"67"},{"ruleId":"59","severity":1,"message":"68","line":7,"column":23,"nodeType":"61","messageId":"62","endLine":7,"endColumn":35},{"ruleId":"59","severity":1,"message":"69","line":8,"column":21,"nodeType":"61","messageId":"62","endLine":8,"endColumn":31},{"ruleId":"59","severity":1,"message":"70","line":10,"column":12,"nodeType":"61","messageId":"62","endLine":10,"endColumn":19},{"ruleId":"59","severity":1,"message":"71","line":10,"column":21,"nodeType":"61","messageId":"62","endLine":10,"endColumn":34},{"ruleId":"59","severity":1,"message":"72","line":15,"column":13,"nodeType":"61","messageId":"62","endLine":15,"endColumn":21},{"ruleId":"59","severity":1,"message":"73","line":1,"column":16,"nodeType":"61","messageId":"62","endLine":1,"endColumn":24},{"ruleId":"59","severity":1,"message":"74","line":1,"column":26,"nodeType":"61","messageId":"62","endLine":1,"endColumn":35},{"ruleId":"59","severity":1,"message":"75","line":8,"column":9,"nodeType":"61","messageId":"62","endLine":8,"endColumn":20},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'subsetData' is assigned a value but never used.","Identifier","unusedVar","'setSubsetData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateStats'. Either include it or remove the dependency array.","ArrayExpression",["76"],"'setMapCenter' is assigned a value but never used.","'setMapZoom' is assigned a value but never used.","'heatmap' is assigned a value but never used.","'toggleHeatmap' is assigned a value but never used.","'logScale' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'cover_photo' is assigned a value but never used.",{"desc":"77","fix":"78"},"Update the dependencies array to be: [props.data, updateStats]",{"range":"79","text":"80"},[2994,3006],"[props.data, updateStats]"]