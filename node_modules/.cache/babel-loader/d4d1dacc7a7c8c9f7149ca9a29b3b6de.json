{"ast":null,"code":"var _jsxFileName = \"/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/AreaStat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport { areaRadial } from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AreaStat(props) {\n  _s();\n\n  // Create an event listener that will update the state when the zooms in or out of the map or drag the map.\n  // Maybe create a removeEventListener function that will remove the event listener when the component is unmounted.\n  // Renders 3 times, first time before any data is loaded, second time when data is loaded, third time when the map is zoomed in or out.\n  function updateStats() {\n    if (props.data) {\n      let areaMin = d3.quantile(props.data, 0.75, d => d.price);\n      let areaMax = d3.quantile(props.data, 0.25, d => d.price);\n      let areaAverage = d3.median(props.data, d => d.price);\n      console.log(IQR);\n      let carMinCommuteTime = 0; //Function when I get the feature engineered dataset: d3.min(data, d => d.carCommuteTime);\n\n      let carMaxCommuteTime = 0; //Function when I get the feature engineered dataset: d3.max(data, d => d.carCommuteTime);\n\n      let transitMinCommuteTime = 0; //Function when I get the feature engineered dataset: d3.min(data, d => d.transitCommuteTime);\n\n      let transitMaxCommuteTime = 0; //Function when I get the feature engineered dataset: d3.max(data, d => d.transitCommuteTime);\n\n      let walkingMinCommuteTime = 0; //Function when I get the feature engineered dataset: d3.min(data, d => d.walkingCommuteTime);\n\n      let walkingMaxCommuteTime = 0; //Function when I get the feature engineered dataset: d3.max(data, d => d.walkingCommuteTime);\n\n      let bikingMinCommuteTime = 0; //Function when I get the feature engineered dataset: d3.min(data, d => d.bikingCommuteTime);\n\n      let bikingMaxCommuteTime = 0; //Function when I get the feature engineered dataset: d3.max(data, d => d.bikingCommuteTime);\n\n      setStats({\n        areaMin: areaMin,\n        areaMax: areaMax,\n        areaAverage: parseInt(areaAverage),\n        carMinCommuteTime: carMinCommuteTime,\n        carMaxCommuteTime: carMaxCommuteTime,\n        transitMinCommuteTime: transitMinCommuteTime,\n        transitMaxCommuteTime: transitMaxCommuteTime,\n        walkingMinCommuteTime: walkingMinCommuteTime,\n        walkingMaxCommuteTime: walkingMaxCommuteTime,\n        bikingMinCommuteTime: bikingMinCommuteTime,\n        bikingMaxCommuteTime: bikingMaxCommuteTime\n      });\n    }\n  } // Filters the data based on the viewable area of the map and updates the stats in the area\n\n\n  const [stats, setStats] = useState(null);\n  useEffect(() => {\n    updateStats();\n  }, []);\n  console.log(props.data);\n  console.log(stats);\n\n  if (stats) {\n    //Only render the Area Overview if the stats have been loaded to prevent unncessary renders\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"area-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"area--title\",\n        children: \"Area Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"area--price\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\" \", `$${stats.areaMin}/month - $${stats.areaMax}/month`, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\" \", `Average Rent price in map area: $${stats.areaAverage}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"area--commute\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"car-commmute-time\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"8 min to 16 min\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transit-commmute-time\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"8 min to 16 min\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"walking-commmute-time\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"8 min to 16 min\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"biking-commmute-time\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"8 min to 16 min\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"area--crime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"area--rent-estimate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AreaStat, \"QHCAg5+sC7SrLiGx+x4h2IICBFk=\");\n\n_c = AreaStat;\n\nvar _c;\n\n$RefreshReg$(_c, \"AreaStat\");","map":{"version":3,"names":["React","useState","useEffect","d3","areaRadial","AreaStat","props","updateStats","data","areaMin","quantile","d","price","areaMax","areaAverage","median","console","log","IQR","carMinCommuteTime","carMaxCommuteTime","transitMinCommuteTime","transitMaxCommuteTime","walkingMinCommuteTime","walkingMaxCommuteTime","bikingMinCommuteTime","bikingMaxCommuteTime","setStats","parseInt","stats"],"sources":["/Users/alanzhang/Housing-DashBoard-Web/hd-web/src/components/AreaStat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport { areaRadial } from 'd3';\n\nexport default function AreaStat(props) {\n\n    // Create an event listener that will update the state when the zooms in or out of the map or drag the map.\n    // Maybe create a removeEventListener function that will remove the event listener when the component is unmounted.\n\n    // Renders 3 times, first time before any data is loaded, second time when data is loaded, third time when the map is zoomed in or out.\n    function updateStats() {\n        if (props.data) {\n            let areaMin = d3.quantile(props.data, 0.75, d => d.price); \n            let areaMax = d3.quantile(props.data, 0.25, d => d.price); \n            let areaAverage = d3.median(props.data, d => d.price);\n            console.log(IQR)\n            let carMinCommuteTime = 0 //Function when I get the feature engineered dataset: d3.min(data, d => d.carCommuteTime);\n            let carMaxCommuteTime = 0 //Function when I get the feature engineered dataset: d3.max(data, d => d.carCommuteTime);\n            let transitMinCommuteTime = 0 //Function when I get the feature engineered dataset: d3.min(data, d => d.transitCommuteTime);\n            let transitMaxCommuteTime = 0 //Function when I get the feature engineered dataset: d3.max(data, d => d.transitCommuteTime);\n            let walkingMinCommuteTime = 0 //Function when I get the feature engineered dataset: d3.min(data, d => d.walkingCommuteTime);\n            let walkingMaxCommuteTime = 0 //Function when I get the feature engineered dataset: d3.max(data, d => d.walkingCommuteTime);\n            let bikingMinCommuteTime = 0 //Function when I get the feature engineered dataset: d3.min(data, d => d.bikingCommuteTime);\n            let bikingMaxCommuteTime = 0 //Function when I get the feature engineered dataset: d3.max(data, d => d.bikingCommuteTime);\n            setStats({\n                areaMin: areaMin,\n                areaMax: areaMax,\n                areaAverage: parseInt(areaAverage),\n                carMinCommuteTime: carMinCommuteTime,\n                carMaxCommuteTime: carMaxCommuteTime,\n                transitMinCommuteTime: transitMinCommuteTime,\n                transitMaxCommuteTime: transitMaxCommuteTime,\n                walkingMinCommuteTime: walkingMinCommuteTime,\n                walkingMaxCommuteTime: walkingMaxCommuteTime,\n                bikingMinCommuteTime: bikingMinCommuteTime,\n                bikingMaxCommuteTime: bikingMaxCommuteTime,\n            });\n        }\n    }\n\n    // Filters the data based on the viewable area of the map and updates the stats in the area\n    const [stats, setStats] = useState(null);\n\n    useEffect(() => {\n        updateStats();\n    }, []);\n    console.log(props.data);\n    console.log(stats);\n\n    if (stats) { //Only render the Area Overview if the stats have been loaded to prevent unncessary renders\n        return (\n            <div className=\"area-stats\">\n                <h3 className='area--title'>Area Overview</h3>\n                <div className='area--price'>\n                    <h4> {`$${stats.areaMin}/month - $${stats.areaMax}/month`} </h4>\n                    <h4> {`Average Rent price in map area: $${stats.areaAverage}`}</h4>\n                </div>\n                <div className='area--commute'>\n                    <div className='car-commmute-time'>\n                        {/* placeholder icon */}\n                        <p>8 min to 16 min</p>\n                    </div>\n                    <div className='transit-commmute-time'>\n                        {/* placeholder icon */}\n                        <p>8 min to 16 min</p>\n                    </div>\n                    <div className='walking-commmute-time'>\n                        {/* placeholder icon */}\n                        <p>8 min to 16 min</p>\n                    </div>\n                    <div className='biking-commmute-time'>\n                        {/* placeholder icon */}\n                        <p>8 min to 16 min</p>\n                    </div>\n                </div>\n                <div className='area--crime'></div>\n                <div className='area--rent-estimate'></div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}